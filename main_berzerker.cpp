#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "network_explorer.h"

#ifndef INCLUDES_H
#include "includes.h"
#endif

#ifndef CRYPTER_H
#include "crypter.h"
#endif

//#include "files_explorer.h"
#include<time.h>

short int OS;

void detect_os()
{

	#if __APPLE__
	    OS = 2;
	#elif _WIN32
	    OS = 1;
	#elif __LINUX__
	    OS = 0;
	#elif BSD
	    OS = 3;
	#elif __unix__
	    OS = 4;
	#else
	    OS = -1;
	#endif
	
	//printf("%d\n", OS);
}

void strip_string(char * target_string)
{

	int i = 0;
	int j = strlen( target_string ) - 1;

	while(target_string[i] == ' ') i++;
	while(target_string[j] == ' ') j--;

	int k = 0;

	for(int q = i; q <= j; q++) target_string[k++] = target_string[q];

	target_string[k] = '\0';

}

void parse_file(char * main_buffer,int buffer_size,FILE * read_fp)
{
	char read_c;
	int i = 0;
	while( fscanf(read_fp,"%c",&read_c) != EOF )
	{
		if(read_c == '\n' || i == buffer_size-1 ) 
		{
			printf("%s\n", main_buffer);
			i = 0;
		}
		else
		{
			main_buffer[i] = read_c;
			i++;
		}
	}
}

int main(int argc, char const *argv[])
{
	
	detect_os();

	file_explorer f_explorer(OS);

	char * chr_buf = (char *) malloc(100);

	//strcpy(chr_buf,"dir");
	//strcpy(chr_buf,"C:\\Windows\\System32\\calc.exe");
	strcpy(chr_buf, "netstat -a" );

	//f_explorer.execute_os_cmd(chr_buf);

	//file_directory_link * fd_lnk_itr = f_explorer.get_directory_files(chr_buf);
	//printf("%s\n", fd_lnk_itr->dirname);
	//iterate_file_directory_link(fd_lnk_itr);
	//free_file_directory_link(fd_lnk_itr);

	//f_explorer.debug_vars();
	//printf("%s\n", chr_buf);

	network_explorer nt(OS);

	//nt.check_open_tcp_ports();

	//nt.print_open_tcp_ports();

	//nt.load_network_adapters();

	free(chr_buf);

	system("pause");

	return 0;
}