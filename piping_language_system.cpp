#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<string.h>

#ifndef PLS_H
#include "piping_language_system.h"
#endif

language_pipe::language_pipe()
{
	//printf("constructor called!\n");
	srand((unsigned) time(0));
	chr_buff_1 = (char*)malloc(500);
	lp_id = (char*)malloc(100);
	lp_pass = (char*)malloc(100);
}

language_pipe::~language_pipe()
{
	free(chr_buff_1);
	free(lp_id);
	free(lp_pass);
}

int language_pipe::generate_random_nr(int low, int high)
{
	int return_nr = low + ( rand() % (high - low) );
	return return_nr;
}

int language_pipe::generate_random_nr_static(int low, int high)
{
	int return_nr = low + ( rand() % (high - low) );
	return return_nr;	
}

char * language_pipe::generate_random_string(int length)
{
	strcpy(chr_buff_1,"");
	int current_chr_pos = 0;
	for (int i = 0; i < length; i++)
	{
		int ascii_nr = this->generate_random_nr(48,122);
		chr_buff_1[ current_chr_pos ] = ascii_nr;
		current_chr_pos++;
	}
	chr_buff_1[ current_chr_pos ] = '\0'; //don't forget this :)
	return chr_buff_1;
}

void language_pipe::generate_language_pipe_details()
{
	strcpy(this->lp_id, this->generate_random_string(30) );
	strcpy(this->lp_pass, this->generate_random_string(30) );
	this->message_nr = 0;
	//printf("%s %s %d\n", this->lp_id, this->lp_pass, this->message_nr);
}

void language_pipe::change_language_pipe_id(char * new_id)
{
	strcpy( this->lp_id, new_id );
}

void language_pipe::change_language_pipe_pass(char * new_pass)
{
	strcpy( this->lp_pass, new_pass );	
}

void language_pipe::change_language_pipe_message_nr(int new_message_nr)
{
	this->message_nr = new_message_nr;
}

char * language_pipe::get_language_pipe_string()
{
	char sm_buff[15];

	itoa(this->message_nr,sm_buff,10);

	strcpy(chr_buff_1,this->lp_id);
	strcat(chr_buff_1,"/*_*/");
	strcat(chr_buff_1,this->lp_pass);
	strcat(chr_buff_1,"/*_*/");
	strcat(chr_buff_1,sm_buff);
	strcat(chr_buff_1,"/*_*/");
	strcat(chr_buff_1,"RANDOM_MESSAGE_BLOCK");

	return chr_buff_1;
}

bool language_pipe::check_good_language_pipe(char * language_pipe_string)
{

	char splitted_string_arr[5][1000];
	int i = 0;
	int j = 0;
	int w = 0;
	
	char * main_string = chr_buff_1;
	char random_char_buff[1000];
	strcpy(random_char_buff,language_pipe_string);
	for (w = 0; w < strlen(language_pipe_string); w++) main_string[w] = language_pipe_string[w];
	main_string[w]='\0'; 
	//main_string = strstr(main_string,"/*_*/");
	//printf("%s\n", main_string);
	while( main_string != NULL )
	{
		if(i > 0) strcpy(main_string, main_string+strlen("/*_*/") );
		//printf("%s\n", main_string);
		int target_strlen = 0;
		if( strstr(main_string,"/*_*/") != NULL ) target_strlen = strlen( strstr(main_string,"/*_*/") );
		
		int q = 0;

		for (q = 0; q < strlen(main_string) - target_strlen; q++) //because fking strncpy doesn't work properly
		{
			splitted_string_arr[i][q] = main_string[q];
		}

		splitted_string_arr[i][q] = '\0';

		//printf("%s\n", splitted_string_arr[i]);
		main_string = strstr(main_string,"/*_*/");
		i++;
	}

	strcpy(language_pipe_string,random_char_buff);
	//printf("%s\n", language_pipe_string);

	//printf("%d\n", strlen(splitted_string_arr[2]) );

	if(i > 3)
	{
		int p_message_nr = atoi( splitted_string_arr[2] );
		if( ( strcmp(splitted_string_arr[0],this->lp_id) == 0 ) && ( strcmp(splitted_string_arr[1],this->lp_pass) == 0 ) && ( p_message_nr == this->message_nr ) )
		{
			//printf("%s %s %s\n", splitted_string_arr[0], splitted_string_arr[1], splitted_string_arr[2]);
			return true;
		}
	}

	return false;

}

char * language_pipe::extract_message_block(char * target_pipe)
{
	if( this->check_good_language_pipe(target_pipe) )
	{

		char splitted_string_arr[5][1000];
		int i = 0;
		int j = 0;
		int w = 0;
		
		char * main_string = chr_buff_1;
		char random_char_buff[1000];
		strcpy(random_char_buff,target_pipe);
		//printf("%s\n", target_pipe);
		for (w = 0; w < strlen(target_pipe); w++) main_string[w] = target_pipe[w];
		main_string[w]='\0';
		//main_string = strstr(main_string,"/*_*/");
		while( main_string != NULL )
		{
			if(i > 0) strcpy(main_string, main_string+strlen("/*_*/") );
			//printf("%s\n", main_string);
			int target_strlen = 0;
			if( strstr(main_string,"/*_*/") != NULL ) target_strlen = strlen( strstr(main_string,"/*_*/") );
			
			int q = 0;

			for (q = 0; q < strlen(main_string) - target_strlen; q++) //because fking strncpy doesn't work properly
			{
				splitted_string_arr[i][q] = main_string[q];
			}

			splitted_string_arr[i][q] = '\0';

			//printf("%s\n", splitted_string_arr[i]);
			main_string = strstr(main_string,"/*_*/");
			i++;
		}

		strcpy(target_pipe,random_char_buff);

		strcpy(chr_buff_1,splitted_string_arr[3]);
		//printf("%s\n", splitted_string_arr[2]);

		return chr_buff_1;

	}

}

// /*_*/

int main(int argc, char const *argv[])
{
	language_pipe lp;

	lp.generate_language_pipe_details();
	
	//char * random_chr_buff = lp.generate_random_string(30);
	char * random_chr_buff = (char*)malloc(1000);

	//printf("%s\n", lp.get_language_pipe_string() );

	printf("%s\n", lp.extract_message_block( lp.get_language_pipe_string() ) );

}