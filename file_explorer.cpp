#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "includes.h"
#include "files_explorer.h"

file_explorer::file_explorer(short int os_val)
{
	target_os = os_val;
	list_directory_content_cmd = (char *)malloc(30);
	get_current_directory_cmd = (char *)malloc(10);
	current_dir_path = (char *)malloc(1000);
	current_user = (char*)malloc(100);
	list_directory_content_cmd_flags = (char*)malloc(20);

	load_os_cmds();
	get_current_directory();
	get_current_user();

	//printf("%d\n", target_os);
}

file_explorer::~file_explorer()
{
	free(list_directory_content_cmd);
	free(get_current_directory_cmd);
	free(current_dir_path);
	free(current_user);
	free(list_directory_content_cmd_flags);
}



void file_explorer::debug_vars()
{
	printf("%s\n", list_directory_content_cmd);
}

char * file_explorer::get_current_directory()
{
	FILE * fp = execute_os_cmd( get_current_directory_cmd );

	fscanf(fp,"%s",current_dir_path);

	//printf("%s\n", current_dir_path);

	return current_dir_path;

}


void file_explorer::load_os_cmds()
{

	switch(target_os)
	{
		case 0:
		case 2:
			strcpy(list_directory_content_cmd,"ls");
			strcpy(get_current_directory_cmd,"pwd");
			strcpy(list_directory_content_cmd_flags,"");
			break;
		case 1:
			strcpy(list_directory_content_cmd,"dir");
			strcpy(get_current_directory_cmd,"cd");
			strcpy(list_directory_content_cmd_flags,"/b");
			break;
	}

}


FILE * file_explorer::execute_os_cmd(char cmd[30])
{	
	
	strip_string(cmd);

	FILE * cmd_buff = popen(cmd,"r");

	return cmd_buff;

}

void file_explorer::print_target_os()
{
	printf("%d\n", target_os);
}

void file_explorer::simple_read(char * buff_result,char * cmd_to_exec)
{

	FILE * fp = execute_os_cmd(cmd_to_exec);

	fscanf(fp,"%s",buff_result);

}

char * file_explorer::get_current_user()
{

	//printf("%d\n", this->target_os);

	char * exec_cmd = (char*)malloc(100);

	switch(this->target_os)
	{
		case 0:
		case 2:
			strcpy(exec_cmd,"whoami");
			break;
		case 1:
			strcpy(exec_cmd,"echo %username%");
			break;
	}

	simple_read(exec_cmd,exec_cmd);

	strcpy(this->current_user,exec_cmd);

	//printf("%s\n", exec_cmd);

	free(exec_cmd);

	return this->current_user;

}

file_directory_link * file_explorer::get_directory_files(char * dir)
{
	char * add_buff = (char *)malloc(1000);
	strcpy(add_buff,list_directory_content_cmd);
	strcat(add_buff," ");
	strcat(add_buff,dir);
	strcat(add_buff," ");
	strcat(add_buff,list_directory_content_cmd_flags);
	FILE *fp = execute_os_cmd(add_buff);
	free(add_buff);
	char * buff_reader = (char *)malloc(400);
	file_directory_link * first = (file_directory_link *)malloc(sizeof(file_directory_link));
	first->next = NULL;
	file_directory_link * last;
	last = first;
	file_directory_link * fd_lnk;
	int i = 0;
	while(fscanf(fp,"%s",buff_reader) != EOF)
	{
		if(i == 0)
		{
			strcpy(first->dirname,buff_reader);
		}
		else
		{
			fd_lnk = (file_directory_link *)malloc(sizeof(file_directory_link));
			strcpy(fd_lnk->dirname,buff_reader);
			fd_lnk->next = NULL;
			last->next = fd_lnk;
			last = fd_lnk;
		}

		i++;
	}

	free(buff_reader);
	//free(first);
	//free(fd_lnk);

	return first;

}

void free_file_directory_link(file_directory_link * fd_lnk)
{
	if(fd_lnk->next != NULL) free_file_directory_link(fd_lnk->next);
	free(fd_lnk);
}

void iterate_file_directory_link(file_directory_link * first)
{
	file_directory_link * fd_itr;
	fd_itr = first;

	printf("%s\n", fd_itr->dirname);

	while(fd_itr->next != NULL)
	{
		fd_itr = fd_itr->next;
		printf("%s\n", fd_itr->dirname);
	}

}
