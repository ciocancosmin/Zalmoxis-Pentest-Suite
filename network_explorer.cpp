#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "network_explorer.h"

#ifndef INCLUDES_H
#include "includes.h"
#endif

#include<time.h>

network_explorer::network_explorer(short int os_val) : file_explorer(os_val)
{
	os_nr = os_val;
	open_tcp_ports_size = 0;

	cmd_buffer = (char *)malloc(100);
	open_tcp_ports = (int*)malloc(5000 * sizeof(int));
}

network_explorer::~network_explorer()
{
	//
	free(cmd_buffer);
	free(open_tcp_ports);
}

main_ip_struct network_explorer::parse_ip_string(char * ip_string)
{
	main_ip_struct return_ip_struct;
	int i = 0;
	for(i=0;ip_string[i] != ':';i++);
	strncpy(return_ip_struct.ip,ip_string,i);
	return_ip_struct.ip[i] = '\0'; //just to be safe
	return_ip_struct.port = atoi( ip_string + (i+1) );
	return return_ip_struct;
}

void network_explorer::check_open_tcp_ports()
{
	
	//check open_ports_cmd
	FILE * fp_tmp;
	if(this->os_nr == 1)
	{
		strcpy(this->cmd_buffer,"netstat -a");
		fp_tmp = this->execute_os_cmd(this->cmd_buffer);	
	}
	else if(this->os_nr == 2)
	{
		strcpy(this->cmd_buffer,"netstat -an -ptcp | grep LISTEN");
		fp_tmp = this->execute_os_cmd(this->cmd_buffer);	
	}
	else if(this->os_nr == 0)
	{
		//
	}
	

	//specific os parsing
	if(this->os_nr == 1)
	{
		//char * processing_buffer = (char*)malloc(500);

		open_tcp_ports_size = 0;

		time_t time_now = time(0);

		while( time(0) - time_now <= 3 )
		{
			fscanf(fp_tmp,"%s",this->cmd_buffer);
			if( strcmp(this->cmd_buffer,"TCP") == 0 )
			{
				//local address
				fscanf(fp_tmp,"%s",this->cmd_buffer);
				//printf("%s ", this->cmd_buffer);
				main_ip_struct temp_ip_struct = parse_ip_string(this->cmd_buffer);
				//foreign address
				fscanf(fp_tmp,"%s",this->cmd_buffer);
				//printf("%s ", this->cmd_buffer);
				//state
				fscanf(fp_tmp,"%s",this->cmd_buffer);
				//printf("%s ", this->cmd_buffer);
				if( ( ( strcmp(temp_ip_struct.ip,"0.0.0.0") == 0 ) || ( strcmp(temp_ip_struct.ip,"127.0.0.1") == 0 ) ) && ( strcmp( this->cmd_buffer, "LISTENING" ) == 0 )  )
				{
					//printf("%s %d\n", temp_ip_struct.ip, temp_ip_struct.port);
					open_tcp_ports[ open_tcp_ports_size ] = temp_ip_struct.port;
					open_tcp_ports_size++;
				}
				//next
				//printf("\n");
			}
		}	

		//free(processing_buffer);
	}
	else if(this->os_nr == 2 || this->os_nr == 0)
	{

		open_tcp_ports_size = 0;

		while( fscanf(fp_tmp,"%s",this->cmd_buffer) != EOF )
		{
			if( strlen(this->cmd_buffer) > 3 ) this->cmd_buffer[3] = '\0';
			if( strcmp(this->cmd_buffer,"tcp") == 0 )
			{

				//do 2 jumps
				fscanf(fp_tmp,"%s",this->cmd_buffer);
				fscanf(fp_tmp,"%s",this->cmd_buffer);

				fscanf(fp_tmp,"%s",this->cmd_buffer);
				//printf("%s\n", this->cmd_buffer);

				int final_port_nr;

				if( this->os_nr == 2 )
				{
					strcpy(this->cmd_buffer,this->cmd_buffer + 2);
					final_port_nr = atoi(this->cmd_buffer);
				}
				else if( this->os_nr == 0 )
				{
					//insert linux version
					
				}

				//printf("%d\n", final_port_nr);

				open_tcp_ports[ open_tcp_ports_size ] = final_port_nr;
				open_tcp_ports_size++;

			}
		}

	}

}

void network_explorer::print_open_tcp_ports()
{
	for(int i=0;i<open_tcp_ports_size;i++) printf("%d ", open_tcp_ports[i]);
	printf("\n");
}

void network_explorer::load_network_adapters()
{

	FILE * fp_tmp;

	if(this->os_nr == 0)
	{
		//linux

	}
	else if(this->os_nr == 1)
	{
		//windows
		strcpy(this->cmd_buffer,"ipconfig");
		fp_tmp = this->execute_os_cmd(cmd_buffer);
		char x;
		while( fscanf(fp_tmp,"%c",&x) != EOF )
		{
			printf("%c", x);
		}

	}
	else if(this->os_nr == 2)
	{

	}

}
